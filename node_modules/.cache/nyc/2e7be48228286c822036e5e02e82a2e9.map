{"version":3,"sources":["ireportModel.js"],"names":["Record","records","record","newRecord","id","length","title","createdOn","createdBy","type","status","comment","location","image","video","push","recordType","allFoundRecords","obj","foundRecord","find","Number","findOneRecord","recordIndex","indexOf","splice"],"mappings":";;;;;;;;;;IAAMA,M;AACJ,oBAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,EAAf;AACD;;;;iCAEYC,M,EAAQ;AACnB,UAAMC,YAAY;AAChBC,YAAI,KAAKH,OAAL,CAAaI,MAAb,GAAsB,CADV;AAEhBC,eAAOJ,OAAOI,KAFE;AAGhBC,mBAAWL,OAAOK,SAHF;AAIhBC,mBAAWN,OAAOM,SAJF;AAKhBC,cAAMP,OAAOO,IALG;AAMhBC,gBAAQR,OAAOQ,MANC;AAOhBC,iBAAST,OAAOS,OAPA;AAQhBC,kBAAUV,OAAOU,QARD;AAShBC,eAAOX,OAAOW,KATE;AAUhBC,eAAOZ,OAAOY;AAVE,OAAlB;AAYA,WAAKb,OAAL,CAAac,IAAb,CAAkBZ,SAAlB;AACA,aAAQA,SAAR;AACD;;;mCAEca,U,EAAY;AACzB,UAAMC,kBAAkB,EAAxB;AACA,WAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAM,KAAKjB,OAAL,CAAaI,MAArC,EAA6Ca,KAA7C,EAAoD;AAClD,YAAI,KAAKjB,OAAL,CAAaiB,GAAb,EAAkBT,IAAlB,KAA2BO,UAA/B,EAA2C;AACzCC,0BAAgBF,IAAhB,CAAqB,KAAKd,OAAL,CAAaiB,GAAb,CAArB;AACD;AACF;AACD,aAAQD,eAAR;AACD;;;kCAEab,E,EAAI;AAChB,UAAMe,cAAc,KAAKlB,OAAL,CAAamB,IAAb,CAAkB;AAAA,eAAUlB,OAAOE,EAAP,KAAciB,OAAOjB,EAAP,CAAxB;AAAA,OAAlB,CAApB;AACA,aAAQe,WAAR;AACD;;AAED;;;;kCACcf,E,EAAIF,M,EAAQ;AACxB,UAAMiB,cAAc,KAAKG,aAAL,CAAmBlB,EAAnB,CAApB;AACA,UAAMmB,cAAc,KAAKtB,OAAL,CAAauB,OAAb,CAAqBL,WAArB,CAApB;AACA,WAAKlB,OAAL,CAAasB,WAAb,EAA0BZ,OAA1B,GAAoCT,OAAOS,OAA3C;AACA,aAAO,EAAP;AACD;;;mCAEcP,E,EAAIF,M,EAAQ;AACzB,UAAMiB,cAAc,KAAKG,aAAL,CAAmBlB,EAAnB,CAApB;AACA,UAAMmB,cAAc,KAAKtB,OAAL,CAAauB,OAAb,CAAqBL,WAArB,CAApB;AACA,WAAKlB,OAAL,CAAasB,WAAb,EAA0BX,QAA1B,GAAqCV,OAAOU,QAA5C;AACA,aAAO,EAAP;AACD;;;iCAEYR,E,EAAI;AACf,UAAMe,cAAc,KAAKG,aAAL,CAAmBlB,EAAnB,CAApB;AACA,UAAMmB,cAAc,KAAKtB,OAAL,CAAauB,OAAb,CAAqBL,WAArB,CAApB;AACA,WAAKlB,OAAL,CAAasB,WAAb,EAA0BE,MAA1B,CAAiCF,WAAjC,EAA8C,CAA9C;AACA,aAAO,EAAP;AACD;;;;;;kBAEYvB,M","file":"ireportModel.js","sourceRoot":"C:/Users/CyberCloned/Documents/Zokky/Andela/iReporterApp/src/models","sourcesContent":["class Record {\r\n  constructor() {\r\n    this.records = [];\r\n  }\r\n\r\n  createRecord(record) {\r\n    const newRecord = {\r\n      id: this.records.length + 1,\r\n      title: record.title,\r\n      createdOn: record.createdOn,\r\n      createdBy: record.createdBy,\r\n      type: record.type,\r\n      status: record.status,\r\n      comment: record.comment,\r\n      location: record.location,\r\n      image: record.image,\r\n      video: record.video,\r\n    };\r\n    this.records.push(newRecord);\r\n    return (newRecord);\r\n  }\r\n\r\n  findAllRecords(recordType) {\r\n    const allFoundRecords = [];\r\n    for (let obj = 0; obj < this.records.length; obj++) {\r\n      if (this.records[obj].type === recordType) {\r\n        allFoundRecords.push(this.records[obj]);\r\n      }\r\n    }\r\n    return (allFoundRecords);\r\n  }\r\n\r\n  findOneRecord(id) {\r\n    const foundRecord = this.records.find(record => record.id === Number(id));\r\n    return (foundRecord);\r\n  }\r\n\r\n  // record from the controller will be req.body\r\n  updateComment(id, record) {\r\n    const foundRecord = this.findOneRecord(id);\r\n    const recordIndex = this.records.indexOf(foundRecord);\r\n    this.records[recordIndex].comment = record.comment;\r\n    return {};\r\n  }\r\n\r\n  updateLocation(id, record) {\r\n    const foundRecord = this.findOneRecord(id);\r\n    const recordIndex = this.records.indexOf(foundRecord);\r\n    this.records[recordIndex].location = record.location;\r\n    return {};\r\n  }\r\n\r\n  deleteRecord(id) {\r\n    const foundRecord = this.findOneRecord(id);\r\n    const recordIndex = this.records.indexOf(foundRecord);\r\n    this.records[recordIndex].splice(recordIndex, 1);\r\n    return {};\r\n  }\r\n}\r\nexport default Record;\r\n"]}