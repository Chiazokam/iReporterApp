{"version":3,"sources":["ireportModel.js"],"names":["Record","records","record","newRecord","id","length","title","createdOn","createdBy","type","status","comment","location","image","video","push","recordType","allFoundRecords","obj","foundRecord","find","Number","findOneRecord","recordIndex","indexOf","splice"],"mappings":";;;;;;;;;;IAAMA,M;AACJ,oBAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,EAAf;AACD;;;;iCAEYC,M,EAAQ;AACnB,UAAMC,YAAY;AAChBC,YAAI,KAAKH,OAAL,CAAaI,MAAb,GAAsB,CADV;AAEhBC,eAAOJ,OAAOI,KAFE;AAGhBC,mBAAWL,OAAOK,SAHF;AAIhBC,mBAAWN,OAAOM,SAJF;AAKhBC,cAAMP,OAAOO,IALG;AAMhBC,gBAAQR,OAAOQ,MANC;AAOhBC,iBAAST,OAAOS,OAPA;AAQhBC,kBAAUV,OAAOU,QARD;AAShBC,eAAOX,OAAOW,KATE;AAUhBC,eAAOZ,OAAOY;AAVE,OAAlB;AAYA,WAAKb,OAAL,CAAac,IAAb,CAAkBZ,SAAlB;AACA,aAAQA,SAAR;AACD;;;mCAEca,U,EAAY;AACzB,UAAMC,kBAAkB,EAAxB;AACA,WAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAM,KAAKjB,OAAL,CAAaI,MAArC,EAA6Ca,KAA7C,EAAoD;AAClD,YAAI,KAAKjB,OAAL,CAAaiB,GAAb,EAAkBT,IAAlB,KAA2BO,UAA/B,EAA2C;AACzCC,0BAAgBF,IAAhB,CAAqB,KAAKd,OAAL,CAAaiB,GAAb,CAArB;AACD;AACF;AACD,aAAQD,eAAR;AACD;;;kCAEab,E,EAAI;AAChB,UAAMe,cAAc,KAAKlB,OAAL,CAAamB,IAAb,CAAkB;AAAA,eAAUlB,OAAOE,EAAP,KAAciB,OAAOjB,EAAP,CAAxB;AAAA,OAAlB,CAApB;AACA,aAAQe,WAAR;AACD;;AAED;;;;kCACcf,E,EAAIF,M,EAAQ;AACxB,UAAMiB,cAAc,KAAKG,aAAL,CAAmBlB,EAAnB,CAApB;AACA,UAAMmB,cAAc,KAAKtB,OAAL,CAAauB,OAAb,CAAqBL,WAArB,CAApB;AACA,WAAKlB,OAAL,CAAasB,WAAb,EAA0BZ,OAA1B,GAAoCT,OAAOS,OAA3C;AACA,aAAO,EAAP;AACD;;;mCAEcP,E,EAAIF,M,EAAQ;AACzB,UAAMiB,cAAc,KAAKG,aAAL,CAAmBlB,EAAnB,CAApB;AACA,UAAMmB,cAAc,KAAKtB,OAAL,CAAauB,OAAb,CAAqBL,WAArB,CAApB;AACA,WAAKlB,OAAL,CAAasB,WAAb,EAA0BX,QAA1B,GAAqCV,OAAOU,QAA5C;AACA,aAAO,EAAP;AACD;;;iCAEYR,E,EAAI;AACf,UAAMe,cAAc,KAAKG,aAAL,CAAmBlB,EAAnB,CAApB;AACA,UAAMmB,cAAc,KAAKtB,OAAL,CAAauB,OAAb,CAAqBL,WAArB,CAApB;AACA,WAAKlB,OAAL,CAAasB,WAAb,EAA0BE,MAA1B,CAAiCF,WAAjC,EAA8C,CAA9C;AACA,aAAO,EAAP;AACD;;;;;AAEH;;;kBACe,IAAIvB,MAAJ,E","file":"ireportModel.js","sourceRoot":"C:/Users/CyberCloned/Documents/Zokky/Andela/iReporterApp/src/models","sourcesContent":["class Record {\n  constructor() {\n    this.records = [];\n  }\n\n  createRecord(record) {\n    const newRecord = {\n      id: this.records.length + 1,\n      title: record.title,\n      createdOn: record.createdOn,\n      createdBy: record.createdBy,\n      type: record.type,\n      status: record.status,\n      comment: record.comment,\n      location: record.location,\n      image: record.image,\n      video: record.video,\n    };\n    this.records.push(newRecord);\n    return (newRecord);\n  }\n\n  findAllRecords(recordType) {\n    const allFoundRecords = [];\n    for (let obj = 0; obj < this.records.length; obj++) {\n      if (this.records[obj].type === recordType) {\n        allFoundRecords.push(this.records[obj]);\n      }\n    }\n    return (allFoundRecords);\n  }\n\n  findOneRecord(id) {\n    const foundRecord = this.records.find(record => record.id === Number(id));\n    return (foundRecord);\n  }\n\n  // record from the controller will be req.body\n  updateComment(id, record) {\n    const foundRecord = this.findOneRecord(id);\n    const recordIndex = this.records.indexOf(foundRecord);\n    this.records[recordIndex].comment = record.comment;\n    return {};\n  }\n\n  updateLocation(id, record) {\n    const foundRecord = this.findOneRecord(id);\n    const recordIndex = this.records.indexOf(foundRecord);\n    this.records[recordIndex].location = record.location;\n    return {};\n  }\n\n  deleteRecord(id) {\n    const foundRecord = this.findOneRecord(id);\n    const recordIndex = this.records.indexOf(foundRecord);\n    this.records[recordIndex].splice(recordIndex, 1);\n    return {};\n  }\n}\n// module.exports = Record;\nexport default new Record();\n"]}